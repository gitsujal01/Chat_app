package com.substring.chat.Controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.substring.chat.entities.Message;
import com.substring.chat.entities.Room;
import com.substring.chat.services.RoomService;

@RestController
@RequestMapping("/api/v1/rooms")
public class RoomController {

	@Autowired
	private RoomService rs;
	
	//create room
	@PostMapping
	public ResponseEntity<Room> createRoom(@RequestBody String roomId)
	{
	    Room savedRoom = rs.createRoom(roomId);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedRoom);
	}
	
	//get room
	@GetMapping("/{roomId}")
	public ResponseEntity<?>joinRoom(@PathVariable String roomId)
	{
       Optional<Room> roomOpt = rs.joinRoom(roomId);
       if(roomOpt.isEmpty())
       {
    	   return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Room not found");
       }
       return ResponseEntity.ok(roomOpt.get());
	}
	
	//get messages
	@GetMapping("/{id}/message")
	public ResponseEntity<List<Message>> getMessages(@PathVariable String id,@RequestParam(value="page",defaultValue = "0",required = false)int page,
			                                         @RequestParam(value = "size",defaultValue = "20",required = false)int size)
	{
		Room room = rs.findByRoomId(id).orElse(null);
		if(room == null)
		{
			return ResponseEntity.badRequest().build();
		}
		
		//pagination
		List<Message> messages = room.getMessages();
		int start = Math.max(0, messages.size()-(page+1)*size);
		int end = Math.min(messages.size(), start*size);
		List<Message> paginatedMessages = messages.subList(start, end);
		return ResponseEntity.ok(messages);
	}
	
}
